/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */

package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {

	// determines whether show prints anything
	static boolean doPrint = true;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	// determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	// values passed to CodeGenerator constructor to control grading and debugging
	// output
	private boolean devel = true; // if true, print devel output
	private boolean grade = true; // if true, print grade output

	// private boolean devel = false;
	// private boolean grade = false;

	// sets the default width and height of newly created images. Should be small
	// enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	/**
	 * Generates bytecode for given input. Throws exceptions for Lexical, Syntax,
	 * and Type checking errors
	 * 
	 * @param input
	 *            String containing source code
	 * @return Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {

		// scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
		// show(program); //It may be useful useful to show this here if code generation
		// fails

		// generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); // doing it here shows the values filled in during code gen
		// display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));

		// write byte code to file
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}

		// return generated classfile as byte array
		return bytecode;
	}

	/**
	 * Run main method in given class
	 * 
	 * @param className
	 * @param bytecode
	 * @param commandLineArgs
	 *            String array containing command line arguments, empty array if
	 *            none
	 * @throws +
	 * @throws Throwable
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
		RuntimeLog.initLog(); // initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = { commandLineArgs.getClass() };
		Method m = testClass.getMethod("main", argTypes);
		show("Output from " + m + ":"); // print name of method to be executed
		Object passedArgs[] = { commandLineArgs }; // create array containing params, in this case a single array.
		try {
			m.invoke(null, passedArgs);
		} catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw e;
		}
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then
	 * immediately deleted. To prevent this behavior, waitForKey will pause until a
	 * key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then
	 * immediately deleted. To prevent this behavior, keepFrame will keep the frame
	 * visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}

	/**
	 * Since we are not doing any optimization, the compiler will still create a
	 * class with a main method and the JUnit test will execute it.
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main"
	 * messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n " + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatLit() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 3.0;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;3.0;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void booleanLit() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void showImage() throws Exception {
		String prog = "showImage";
		String input = prog + "{image x; show x;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void decIntAssignment() throws Exception {
		String prog = "intDec";
		String input = prog + "{int a;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void decFloatAssignment() throws Exception {
		String prog = "floatDec";
		String input = prog + "{float x;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void decBooleanAssignment() throws Exception {
		String prog = "booleanDec";
		String input = prog + "{boolean x;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void decImageAssignment() throws Exception {
		String prog = "imageDec";
		String input = prog + "{image x;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void decImageAssignment1() throws Exception {
		String prog = "imageDec";
		String input = prog + "{image x[3,4];} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intAssignment() throws Exception {
		String prog = "intDec";
		String input = prog + "{int a; a := 2;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatAssignment() throws Exception {
		String prog = "floatDec";
		String input = prog + "{float x; x := 10.1;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void booleanAssignment() throws Exception {
		String prog = "booleanDec";
		String input = prog + "{boolean x;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void imageAssignment() throws Exception {
		String prog = "imageDec";
		String input = prog + "{image x; image y; x := y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	// TODO: check for resize and stuff
	@Test
	public void imageAssignment1() throws Exception {
		String prog = "imageDec";
		String input = prog + "{image x[3,4]; image y[4,5]; x := y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void fileAssignment1() throws Exception {
		String prog = "fileDec";
		String input = prog + "{filename x; filename y; x := y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intExprBinaryPlus() throws Exception {
		String prog = "intExprBinary";
		String input = prog + "{int a; a := 2; int b; b := a + 5;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intFloatExprBinaryPlus() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{int a; a := 2; float b; b := a + 5.5; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;7.5;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intFloatExprBinaryPlus1() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{int a; a := 2; float b; b := 5.5; float c; c := b + a; show c;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;7.5;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatExprBinaryPlus() throws Exception {
		String prog = "floatExprBinary";
		String input = prog + "{float a; a := 2.0; float b; b := a + 5.5;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intExprBinaryMinus() throws Exception {
		String prog = "intExprBinary";
		String input = prog + "{int a; a := 2; int b; b := a - 5; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-3;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intFloatExprBinaryMinus() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{int a; a := 2; float b; b := a - 5.5; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-3.5;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatExprBinaryMinus() throws Exception {
		String prog = "floatExprBinary";
		String input = prog + "{float a; a := 2.0; float b; b := a - 5.5; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-3.5;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intExprBinaryMult() throws Exception {
		String prog = "intExprBinary";
		String input = prog + "{int a; a := 2; int b; b := a * 5;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intFloatExprBinaryMult() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{int a; a := 2; float b; b := a * 5.5; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;11.0;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatExprBinaryMult() throws Exception {
		String prog = "floatExprBinary";
		String input = prog + "{float a; a := 2.0; float b; b := a * 5.5; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;11.0;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intExprBinaryDiv() throws Exception {
		String prog = "intExprBinary";
		String input = prog + "{int a; a := 5; int b; b := a / 2; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intFloatExprBinaryDiv() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{int a; a := 7; float b; b := a / 2.0; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;3.5;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatExprBinaryDiv() throws Exception {
		String prog = "floatExprBinary";
		String input = prog + "{float a; a := 5.0; float b; b := a / 2.0; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;2.5;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intExprBinaryPow() throws Exception {
		String prog = "intExprBinary";
		String input = prog + "{int a; a := 5; int b; b := a ** 2; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;25;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void intFloatExprBinaryPow() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{int a; a := 7; float b; b := a ** 2.0; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;49.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void intFloatExprBinaryPow1() throws Exception {
		String prog = "intFloatExprBinary";
		String input = prog + "{float a; a := 7.0; float b; int c; c := 2; b := a ** c; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;49.0;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void floatExprBinaryPow() throws Exception {
		String prog = "floatExprBinary";
		String input = prog + "{float a; a := 5.0; float b; b := a ** 2.0; show b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;25.0;leaving main;", RuntimeLog.globalLog.toString());
	}

	// TODO: test cases left
//	@Test
	public void statementInput() throws Exception {
		String prog = "stmtInput";
		String input = prog + "{image h; input h from @0;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	@Test
	public void statementSleep() throws Exception {
		String prog = "stmtSleep";
		String input = prog + "{sleep 4000;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}

	
	@Test
	public void statementFxnSin() throws Exception {
		String prog = "fxnSin";
		String input = prog + "{float b; b := sin(0.0);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;0.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnCos() throws Exception {
		String prog = "fxnCos";
		String input = prog + "{float b; b := cos(0.0);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnAbsInt() throws Exception {
		String prog = "fxnAbs";
		String input = prog + "{int b; b := abs(10);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;10;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnAbsFloat() throws Exception {
		String prog = "fxnAbs";
		String input = prog + "{float b; b := abs(10.0);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;10.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnAtan() throws Exception {
		String prog = "fxnAtan";
		String input = prog + "{float b; b := atan(0.0);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;0.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnLog() throws Exception {
		String prog = "fxnLog";
		String input = prog + "{float b; b := log(2.0);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;0.6931472;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnInt() throws Exception {
		String prog = "fxnInt";
		String input = prog + "{int foo; foo := int(2.0); show foo;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnFloat() throws Exception {
		String prog = "fxnFloat";
		String input = prog + "{float b; b := float(5);show b;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;5.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnImgHeight() throws Exception {
		String prog = "fxnImgHeight";
		String input = prog + "{image meh[255, 780]; int ht; ht := height(meh); show ht;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;780;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementFxnImgWidth() throws Exception {
		String prog = "fxnImgWidth";
		String input = prog + "{image meh[255, 780]; int wd; wd := width(meh); show wd;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;255;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprUnaryPlus() throws Exception {
		String prog = "unaryPlus";
		String input = prog + "{int meh; meh := +2; }";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprMinus() throws Exception {
		String prog = "unaryMinus";
		String input = prog + "{float boo; boo := -2.0;show boo;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-2.0;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprUnaryExclamInt() throws Exception {
		String prog = "unaryExclam";
		String input = prog + "{int life; life := 42; life := !life; show life;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;-43;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprUnaryExclamBool() throws Exception {
		String prog = "unaryExclam";
		String input = prog + "{boolean bs; bs := true; bs := !bs; show bs;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;false;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprPredefinedNameZ() throws Exception {
		String prog = "predefZ";
		String input = prog + "{int blah; blah := Z+2; show blah;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;257;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprPredefinedNameWidth() throws Exception {
		String prog = "predefWidth";
		String input = prog + "{int foo; foo := default_width + 4; show foo;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;1028;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void exprPredefinedNameHeight() throws Exception {
		String prog = "predefHeight";
		String input = prog + "{int foo; foo := default_height + default_width; show foo;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;2048;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	
	@Test
	public void lhsIdent() throws Exception {
		String prog = "predefHeight";
		String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n" + RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
	}
	
	
	public static void dummy(String args[]) {
		int a = 2, b = 2;
		java.lang.Math.pow(a, b);
//		System.out.println(a);
	}
}