/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles
 * at the University of Florida, Spring 2018.
 * <p>
 * This software is solely for the educational benefit of students
 * enrolled in the course during the Spring 2018 semester.
 * <p>
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 *
 * @Beverly A. Sanders, 2018
 */

package cop5556sp18;

import cop5556sp18.AST.Program;
import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;

import static org.junit.Assert.assertEquals;

public class CodeGenTest {

    // determines whether show prints anything
    static boolean doPrint = true;

    static void show(Object s) {
        if (doPrint) {
            System.out.println(s);
        }
    }

    // determines whether a classfile is created
    static boolean doCreateFile = false;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    // values passed to CodeGenerator constructor to control grading and debugging
    // output
    private boolean devel = true; // if true, print devel output
    private boolean grade = true; // if true, print grade output

    // private boolean devel = false;
    // private boolean grade = false;

    // sets the default width and height of newly created images. Should be small
    // enough to fit on screen.
    public static final int defaultWidth = 1024;
    public static final int defaultHeight = 1024;

    /**
     * Generates bytecode for given input. Throws exceptions for Lexical, Syntax,
     * and Type checking errors
     *
     * @param input String containing source code
     * @return Generated bytecode
     * @throws Exception
     */
    byte[] genCode(String input) throws Exception {

        // scan, parse, and type check
        Scanner scanner = new Scanner(input);
        show(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        Program program = parser.parse();
        TypeChecker v = new TypeChecker();
        program.visit(v, null);
        // show(program); //It may be useful useful to show this here if code generation
        // fails

        // generate code
        CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
        byte[] bytecode = (byte[]) program.visit(cv, null);
        show(program); // doing it here shows the values filled in during code gen
        // display the generated bytecode
        show(CodeGenUtils.bytecodeToString(bytecode));

        // write byte code to file
        if (doCreateFile) {
            String name = ((Program) program).progName;
            String classFileName = "bin/" + name + ".class";
            OutputStream output = new FileOutputStream(classFileName);
            output.write(bytecode);
            output.close();
            System.out.println("wrote classfile to " + classFileName);
        }

        // return generated classfile as byte array
        return bytecode;
    }

    /**
     * Run main method in given class
     *
     * @param className
     * @param bytecode
     * @param commandLineArgs String array containing command line arguments, empty array if
     *                        none
     * @throws +
     * @throws Throwable
     */
    void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
        RuntimeLog.initLog(); // initialize log used for grading.
        DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
        Class<?> testClass = loader.define(className, bytecode);
        @SuppressWarnings("rawtypes")
        Class[] argTypes = {commandLineArgs.getClass()};
        Method m = testClass.getMethod("main", argTypes);
        show("Output from " + m + ":"); // print name of method to be executed
        Object passedArgs[] = {commandLineArgs}; // create array containing params, in this case a single array.
        try {
            m.invoke(null, passedArgs);
        } catch (Exception e) {
            Throwable cause = e.getCause();
            if (cause instanceof Exception) {
                Exception ec = (Exception) e.getCause();
                throw ec;
            }
            throw e;
        }
    }

    /**
     * When invoked from JUnit, Frames containing images will be shown and then
     * immediately deleted. To prevent this behavior, waitForKey will pause until a
     * key is pressed.
     *
     * @throws IOException
     */
    void waitForKey() throws IOException {
        System.out.println("enter any char to exit");
        System.in.read();
    }

    /**
     * When invoked from JUnit, Frames containing images will be shown and then
     * immediately deleted. To prevent this behavior, keepFrame will keep the frame
     * visible for 5000 milliseconds.
     *
     * @throws Exception
     */
    void keepFrame() throws Exception {
        Thread.sleep(5000);
    }

    /**
     * Since we are not doing any optimization, the compiler will still create a
     * class with a main method and the JUnit test will execute it.
     * <p>
     * The only thing it will do is append the "entering main" and "leaving main"
     * messages to the log.
     *
     * @throws Exception
     */
    @Test
    public void emptyProg() throws Exception {
        String prog = "emptyProg";
        String input = prog + "{}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n " + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void integerLit() throws Exception {
        String prog = "intgegerLit";
        String input = prog + "{show 3;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {}; // create command line argument array to initialize params, none in this case
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;3;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatLit() throws Exception {
        String prog = "floatLit";
        String input = prog + "{show 3.0;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;3.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void booleanLit() throws Exception {
        String prog = "booleanLit";
        String input = prog + "{show true;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void showImage() throws Exception {
        String prog = "showImage";
        String input = prog + "{image x; show x;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void decIntAssignment() throws Exception {
        String prog = "intDec";
        String input = prog + "{int a; } ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void decFloatAssignment() throws Exception {
        String prog = "floatDec";
        String input = prog + "{float x;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void decBooleanAssignment() throws Exception {
        String prog = "booleanDec";
        String input = prog + "{boolean x;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void decImageAssignment() throws Exception {
        String prog = "imageDec";
        String input = prog + "{image x;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void decImageAssignment1() throws Exception {
        String prog = "imageDec";
        String input = prog + "{image x[3,4];} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intAssignment() throws Exception {
        String prog = "intDec";
        String input = prog + "{int a; a := 2;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatAssignment() throws Exception {
        String prog = "floatDec";
        String input = prog + "{float x; x := 10.1;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void booleanAssignment() throws Exception {
        String prog = "booleanDec";
        String input = prog + "{boolean x;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void imageAssignment() throws Exception {
        String prog = "imageDec";
        String input = prog + "{image x; image y; x := y;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    // TODO: check for resize and stuff
//	@Test
    public void imageAssignment1() throws Exception {
        String prog = "imageDec";
        String input = prog + "{image x[3,4]; image y[4,5]; x := y;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void fileAssignment1() throws Exception {
        String prog = "fileDec";
        String input = prog + "{filename x; filename y; x := y;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intExprBinaryPlus() throws Exception {
        String prog = "intExprBinary";
        String input = prog + "{int a; a := 2; int b; b := a + 5;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryPlus() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{int a; a := 2; float b; b := a + 5.5; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;7.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryPlus1() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{int a; a := 2; float b; b := 5.5; float c; c := b + a; show c;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;7.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatExprBinaryPlus() throws Exception {
        String prog = "floatExprBinary";
        String input = prog + "{float a; a := 2.0; float b; b := a + 5.5;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intExprBinaryMinus() throws Exception {
        String prog = "intExprBinary";
        String input = prog + "{int a; a := 2; int b; b := a - 5; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;-3;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryMinus() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{int a; a := 2; float b; b := a - 5.5; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;-3.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatExprBinaryMinus() throws Exception {
        String prog = "floatExprBinary";
        String input = prog + "{float a; a := 2.0; float b; b := a - 5.5; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;-3.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intExprBinaryMult() throws Exception {
        String prog = "intExprBinary";
        String input = prog + "{int a; a := 2; int b; b := a * 5;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryMult() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{int a; a := 2; float b; b := a * 5.5; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;11.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatExprBinaryMult() throws Exception {
        String prog = "floatExprBinary";
        String input = prog + "{float a; a := 2.0; float b; b := a * 5.5; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;11.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intExprBinaryDiv() throws Exception {
        String prog = "intExprBinary";
        String input = prog + "{int a; a := 5; int b; b := a / 2; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryDiv() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{int a; a := 7; float b; b := a / 2.0; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;3.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatExprBinaryDiv() throws Exception {
        String prog = "floatExprBinary";
        String input = prog + "{float a; a := 5.0; float b; b := a / 2.0; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2.5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intExprBinaryPow() throws Exception {
        String prog = "intExprBinary";
        String input = prog + "{int a; a := 5; int b; b := a ** 2; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;25;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryPow() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{int a; a := 7; float b; b := a ** 2.0; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;49.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void intFloatExprBinaryPow1() throws Exception {
        String prog = "intFloatExprBinary";
        String input = prog + "{float a; a := 7.0; float b; int c; c := 2; b := a ** c; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;49.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void floatExprBinaryPow() throws Exception {
        String prog = "floatExprBinary";
        String input = prog + "{float a; a := 5.0; float b; b := a ** 2.0; show b;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;25.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void statementInputFileArg() throws Exception {
        String prog = "stmtInput";
        String input = prog + "{image h; input h from @0; show h; sleep 4000;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"/Users/vishi/Documents/Coding/PLP/src/cop5556sp18/testimg.jpeg"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void statementInputFile1() throws Exception {
        String prog = "stmtInput";
        String input = prog + "{image h[200,200]; input h from @0; show h; sleep 4000;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"/Users/vishi/Documents/testimg.jpeg"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void statementInputUrl() throws Exception {
        String prog = "stmtInput";
        String input = prog + "{image h; input h from @0; show h; sleep 4000;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://goo.gl/Jok3Xd", ""};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void statementInputUrl1() throws Exception {
        String prog = "stmtInput";
        String input = prog + "{image h[200,200]; input h from @0; show h; sleep 4000;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://goo.gl/Jok3Xd", ""};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInputInt() throws Exception {
        String prog = "stmtInputInt";
        String input = prog + "{int a; input a from @ 0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"5", "5.0"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;5;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInputFloat() throws Exception {
        String prog = "stmtInputFloat";
        String input = prog + "{float a; input a from @ 0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"5", "5.0"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;5.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInputBoolean() throws Exception {
        String prog = "stmtInputBool";
        String input = prog + "{boolean a; input a from @ 0; show a;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"true", "5.0"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementInputFile() throws Exception {
        String prog = "stmtInputFile";
        String input = prog + "{filename foo; input foo from @ 0;} ";
        System.out.println(input);
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"blah", "5.0"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementSleep() throws Exception {
        String prog = "stmtSleep";
        String input = prog + "{sleep 4000;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void statementFxnSin() throws Exception {
        String prog = "fxnSin";
        String input = prog + "{float b; b := sin(0.0);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;0.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnCos() throws Exception {
        String prog = "fxnCos";
        String input = prog + "{float b; b := cos(0.0);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnAbsInt() throws Exception {
        String prog = "fxnAbs";
        String input = prog + "{int b; b := abs(10);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;10;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnAbsFloat() throws Exception {
        String prog = "fxnAbs";
        String input = prog + "{float b; b := abs(10.0);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;10.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnAtan() throws Exception {
        String prog = "fxnAtan";
        String input = prog + "{float b; b := atan(0.0);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;0.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnLog() throws Exception {
        String prog = "fxnLog";
        String input = prog + "{float b; b := log(2.0);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;0.6931472;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnInt() throws Exception {
        String prog = "fxnInt";
        String input = prog + "{int foo; foo := int(2.0); show foo;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementFxnFloat() throws Exception {
        String prog = "fxnFloat";
        String input = prog + "{float b; b := float(5);show b;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;5.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void statementFxnImgHeight() throws Exception {
        String prog = "fxnImgHeight";
        String input = prog + "{image meh[255, 780]; int ht; ht := height(meh); show ht;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;780;leaving main;", RuntimeLog.globalLog.toString());
    }

    //	@Test
    public void statementFxnImgWidth() throws Exception {
        String prog = "fxnImgWidth";
        String input = prog + "{image meh[255, 780]; int wd; wd := width(meh); show wd;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;255;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprUnaryPlus() throws Exception {
        String prog = "unaryPlus";
        String input = prog + "{int meh; meh := +2; }";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprMinus() throws Exception {
        String prog = "unaryMinus";
        String input = prog + "{float boo; boo := -2.0;show boo;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;-2.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprUnaryExclamInt() throws Exception {
        String prog = "unaryExclam";
        String input = prog + "{int life; life := 42; life := !life; show life;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;-43;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprUnaryExclamBool() throws Exception {
        String prog = "unaryExclam";
        String input = prog + "{boolean bs; bs := true; bs := !bs; show bs;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;false;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprPredefinedNameZ() throws Exception {
        String prog = "predefZ";
        String input = prog + "{int blah; blah := Z+2; show blah;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;257;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprPredefinedNameWidth() throws Exception {
        String prog = "predefWidth";
        String input = prog + "{int foo; foo := default_width + 4; show foo;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1028;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void exprPredefinedNameHeight() throws Exception {
        String prog = "predefHeight";
        String input = prog + "{int foo; foo := default_height + default_width; show foo;}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2048;leaving main;", RuntimeLog.globalLog.toString());
    }


    //	@Test
    public void lhsIdent() throws Exception {
        String prog = "predefHeight";
        String input = prog + "{image foo; image bar; foo := bar; show foo; sleep 1000;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void testExpressionFuncArg3() throws Exception {
        String prog = "predefHeight";
        String input = prog + "{int a; a := 123456789; show red(a); show green(a); show blue(a);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;91;205;21;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void testExpressionFuncArg4() throws Exception {
        String prog = "predefHeight";
        String input = prog + "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a);}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;7;255;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementWrite() throws Exception {
        String prog = "stmtWrite";
        String input = prog + "{image foo; filename bar; input bar from @1; show foo; write foo to bar;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"/Users/vishi/Documents/Coding/PLP/src/cop5556sp18/testimg.jpeg", "blah"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void statementWrite0() throws Exception {
        String prog = "makeRedImage";
        String input = prog + " { image im[256,256]; int x; int y; filename dest; input dest from @ 0;  x := 0; y := 0; while (x < width(im)) { y := 0; while (y < height(im)) { im[x,y] := <<255,255,0,0>>; y := y+1; }; x := x+1; }; show im; sleep 4000; write im to dest; }";

        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"red_image.png"};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void statementIf() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(true){int b; b := a; show b;};} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfEqInt() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a == 0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfEqInt1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a == 1){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void statementIfEqFloat() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a == 0.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfEqFloat1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a == 1.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfEqBool() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(true == a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfEqBool1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(false == a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNEqInt() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a != 0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNEqInt1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a != 1){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void statementIfNEqFloat() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a != 0.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNEqFloat1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a != 1.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNEqBool() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(true != a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNEqBool1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(false != a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfGTInt() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a > 0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNGTInt1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a > 2){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfGTFloat() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a > 0.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNGTFloat1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a > 2.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfGTBool() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(true > a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNGTBool1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(a > false){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfGEInt() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a >= 1){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNGEInt1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a >= 2){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }


    @Test
    public void statementIfGEFloat() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a >= 0.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNGEFloat1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a >= 2.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfGEBool() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(true >= a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNGEBool1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(false >= a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfLTInt() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a < 2){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNLTInt1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a < 1){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfLTFloat() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a < 2.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNLTFloat1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a < 0.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfLTBool() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(true < a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNLTBool1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(false < a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfLEInt() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a <= 2){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNLEInt1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{int a; a := 1; if(a <= 0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfLEFloat() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a <= 1.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNLEFloat1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{float a; a := 1.0; if(a <= 0.0){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfLEBool() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(true <= a){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementIfNLEBool1() throws Exception {
        String prog = "stmtIf";
        String input = prog + "{boolean a; a := true; if(a <= false){int a; a := 2; show a;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;true;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementWhile() throws Exception {
        String prog = "stmtWhile";
        String input = prog + "{int a; a := 1; while(a >= 1){int b; b := a; show b; a := 0;}; show a;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void statementWhile0() throws Exception {
        String prog = "swhile";
        String input = prog + "{int a; a := 5; while(a >= 0){ show a; a := a - 1; }; } ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"success"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;5;4;3;2;1;0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void testExpressionFuncAppWithPixelCartx() throws Exception {
        String prog = "exprPixel";
        String input = prog + "{float r; r := 2.0; float theta; theta := 0.0; show cart_x[r, theta];}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void testExpressionFuncAppWithPixelCarty() throws Exception {
        String prog = "exprPixel";
        String input = prog + "{float r; r := 2.0; float theta; theta := 0.0; show cart_y[r, theta];}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;0;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void testExpressionPixel() throws Exception {
        String prog = "exprPixel";
        String input = prog + "{image a; input a from @0; show a[1, 2];}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;-526345;leaving main;", RuntimeLog.globalLog.toString());
    }

    //    @Test
    public void showRed() throws Exception {
        String prog = "writeimg";
        String input = prog + "{image a[500, 500]; int row; int col; row := 0; col := 0; show height(a); show width(a); while(row < height(a)){ col := 0; while(col < width(a)){ a[row, col] := <<255, 255, 0, 0>>; col := col + 1; }; row := row + 1; }; show a; sleep 1000; } ";

        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
    }


    //    @Test
    public void testDemo1() throws Exception {
        String prog = "demo1";
        String input = prog + " { \n" + "image h; \n" + "input h from @0; \n" + "show h; \n" + "sleep(1000); \n"
                + "image g[width(h),height(h)]; \n" + "int x; \n" + "x:=0; \n" + "while(x<width(g)){int y; \n"
                + "y:=0; \n" + "while(y<height(g)){g[x,y]:=h[y,x]; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+1; \n" + "}; \n"
                + "show g; \n" + "sleep(1000); \n" + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://pbs.twimg.com/profile_images/948294484596375552/RyGNqDEM_400x400.jpg"};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
    }

    //    @Test
    public void makeRedImage() throws Exception {
        String prog = "makeRedImage";
        String input = prog + " { \n" + "image im[256,256]; \n" + "int x; \n" + "int y; \n" + "x := 0; \n"
                + "y := 0; \n" + "while (x < width(im)) { \n" + "y := 0; \n" + "while (y < height(im)) { \n"
                + "im[x,y] := <<255,255,0,0>>; \n" + "y := y+1; \n" + "}; \n" + "x := x+1; \n" + "}; \n" + "show im; sleep(1000); \n"
                + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
    }

    //    @Test
    public void testPolarR2() throws Exception {
        String prog = "PolarR2";
        String input = prog + " { \n" + "image im[1024,1024]; \n" + "int x; \n" + "x := 0; \n"
                + "while (x < width(im)) { \n" + "int y; \n" + "y := 0; \n" + "while (y < height(im)) { \n"
                + "float p; \n" + "p := polar_r[x,y]; \n" + "int r; \n" + "r := int(p) % Z; \n"
                + "im[x,y] := <<Z, 0, 0, r>>; \n" + "y := y+1; \n" + "}; \n" + "x := x + 1; \n" + "}; \n"
                + "show im; sleep(1000); \n" + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};

        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
    }

    //    @Test
    public void testSamples() throws Exception {
        String prog = "samples";
        String input = prog + " { \n" + "image bird; \n" + "input bird from @0; \n" + "show bird; \n"
                + "sleep(4000); \n" + "image bird2[width(bird),height(bird)]; \n" + "int x; \n" + "x:=0; \n"
                + "while(x<width(bird2)) {int y; \n" + "y:=0; \n"
                + "while(y<height(bird2)) {blue(bird2[x,y]):=red(bird[x,y]); \n"
                + "green(bird2[x,y]):=blue(bird[x,y]); \n" + "red(bird2[x,y]):=green(bird[x,y]); \n"
                + "alpha(bird2[x,y]):=Z; \n" + "y:=y+1; \n" + "}; \n" + "x:=x+       1; \n" + "}; \n" + "show bird2; \n"
                + "sleep(4000); \n" + "}";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRr-Wyns9byAXGPhFp28TiviVwEbUS8IkbwRoUzmF1Wk4YbQMedkA"};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
    }


    @Test
    public void expressionFunctionAppWithPixel0() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int res; res := cart_x[2.236068, 1.1071488]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel1() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{int res; res := cart_y[2.236068, 1.1071488]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel2() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float res; res := polar_r[1, 2]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;2.236068;leaving main;", RuntimeLog.globalLog.toString());
    }

    @Test
    public void expressionFunctionAppWithPixel3() throws Exception {
        String prog = "intFloatLit";
        String input = prog + "{float res; res := polar_a[1, 2]; show res;} ";
        byte[] bytecode = genCode(input);
        String[] commandLineArgs = {""};
        runCode(prog, bytecode, commandLineArgs);
        show("Log:\n" + RuntimeLog.globalLog);
        assertEquals("entering main;1.1071488;leaving main;", RuntimeLog.globalLog.toString());
    }

    public static void dummy(String args[]) {
        float a = 0;
        if (a != 0) {
            int b;
            b = 0;
        }
//    		Math.
    }
}